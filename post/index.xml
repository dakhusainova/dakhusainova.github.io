<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://dakhusainova.github.io/post/</link>
      <atom:link href="https://dakhusainova.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 12 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dakhusainova.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://dakhusainova.github.io/post/</link>
    </image>
    
    <item>
      <title>How to make a presentation</title>
      <link>https://dakhusainova.github.io/post/presentationmake/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/presentationmake/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Making a good presentation starts with crafting the content. No matter how compelling your message is, if you don’t get it out of your brain and on to the screen in a simple way, you’ll be met with a sea of blank faces. So, where to begin?&lt;/p&gt;
&lt;p&gt;Create an easy-to-follow structure&lt;/p&gt;
&lt;p&gt;When it comes to what you have to say, break it down into three simple sections: your presentation needs an introduction, body, and conclusion.&lt;/p&gt;
&lt;p&gt;A compelling introduction. Your introduction needs to briefly sum up what you’re going to talk about and why it’s useful or relevant to your audience.
Offer a body of evidence. The body of your presentation is where you hit ’em with the facts, quotes, and evidence to back up your main points.
Sum up with key takeaways. The conclusion is where you loop back to your original statement and give the audience some key takeaways on how they can put into practice what they’ve learned.
No more than 10 slides in total. Who wants to sit through pages and pages of slides? No one, that’s who. By keeping your slide deck to 10 slides, even if your presentation is 30 minutes long, you’ll give the audience a chance to digest the on-screen messages in line with your talk. Using concept maps before structuring your slides can help keep to the point.
Limit the amount of copy on each slide&lt;/p&gt;
&lt;p&gt;Less really is more, especially when it comes to making a good presentation. Too much text and the audience will just be reading the screen instead of looking at you and feeling the emotional impact of your message.&lt;/p&gt;
&lt;p&gt;No more than six words per slide. Marketing king Seth Godin says we should have just six words per slide – that’s not a lot of copy. Choose your words carefully and rewrite until you’ve got it just right.
Think ‘bite-size’ information. We called ourselves Biteable a reason: studies have shown that information is retained better when it’s broken down into bite-sized chunks. Video is a great way to learn and research suggests it’s 95% more compelling than text.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week 3</title>
      <link>https://dakhusainova.github.io/post/last-week3/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/last-week3/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Last week I was in Kazan, a wonderful city, because it is my hometown. And I suffered over laboratory work, watched video tutorials in German and just rested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week 9-12 May</title>
      <link>https://dakhusainova.github.io/post/last-week2/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/last-week2/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The best day this week was the first day, because it was Victory Day. My brother and I were watching parade on TV. After that, I went to Victory Park and went to the center of Kazan. At the end of the day we watched the fireworks in honor of the victory.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is Markdown?</title>
      <link>https://dakhusainova.github.io/post/markdown/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/markdown/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.&lt;/p&gt;
&lt;p&gt;Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn’t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.&lt;/p&gt;
&lt;p&gt;You can add Markdown formatting elements to a plaintext file using a text editor application. Or you can use one of the many Markdown applications for macOS, Windows, Linux, iOS, and Android operating systems. There are also several web-based applications specifically designed for writing in Markdown.&lt;/p&gt;
&lt;p&gt;Depending on the application you use, you may not be able to preview the formatted document in real time. But that’s okay. According to Gruber, Markdown syntax is designed to be readable and unobtrusive, so the text in Markdown files can be read even if it isn’t rendered.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Last week</title>
      <link>https://dakhusainova.github.io/post/last-week/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/last-week/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Friends, last week was terribly difficult for me. I spent it doing laboratory work and the first stage of an individual project. Fortunately, I passed everything on time and did not forget anything, and this has happened to me more than once.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version control</title>
      <link>https://dakhusainova.github.io/post/version-control/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://dakhusainova.github.io/post/version-control/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Version Control Systems (VCS) are used when several people work on one project. Usually, the main project tree is stored in a local
or remote repository, to which access is configured for project participants. When
making changes to the project content, the version control system allows
you to fix them, combine changes made by different project participants,
roll back to any earlier version of the project, if required.
In classical version control systems, a centralized model is used,
assuming a single repository for storing files. Most version control functions are performed by a special server.
The project participant (user)
receives the version of files he needs before starting work through certain commands. After making changes, the user
places the new version in the repository. At the same time, previous versions are not deleted
from the central repository and you can return to them at any time. The server can
not to save the full version of the modified files, but to perform a so—called delta compression - to save only changes between successive versions, which
reduces the amount of data stored.
Version control systems support the ability to track and resolve
conflicts that may arise when several people work on a single
file. You can merge (merge) changes made by different participants (automatically or manually), manually select the desired version, cancel the changes altogether
or lock files for modification. Depending on the settings, the lock is not
allows other users to get a working copy or prevents changing
the working copy of the file by means of the OS file system, thus providing
privileged access to only one user working with the file.
Version control systems can also provide additional, more flexible
functionality. For example, they can support working with multiple versions of a single file, keeping a common history of changes up to the point of branching
versions and their own change histories of each branch. In addition, it is usually available
information about which of the participants, when and what changes were made. Usually this
kind of information is stored in the change log, access to which can be restricted.
Unlike the classical ones, in distributed version control systems, a central
repository is not mandatory.
Among the classic VCS, the most famous are CVS, Subversion, and among the distributed ones — Git, Bazaar, Mercurial. The principles of their work are similar, they differ mainly
in the syntax of the commands used in the work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
